<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go基础 on Even - A super concise theme for Hugo</title>
    <link>http://nanblog.github.io/categories/go%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in go基础 on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Jan 2021 10:14:02 +0800</lastBuildDate><atom:link href="http://nanblog.github.io/categories/go%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go_module管理</title>
      <link>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/go_module%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 11 Jan 2021 10:14:02 +0800</pubDate>
      
      <guid>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/go_module%E7%AE%A1%E7%90%86/</guid>
      <description>Go 1.11 和 Go 1.12 包含了初步的 Go Modules 支持，且计划在 2019 年 8 月发布的 Go 1.13 会在所有开发过程中默认使用 Go Modules。 Go Modules 是为了提升使用其他开发者代码，即添</description>
    </item>
    
    <item>
      <title>go的工作区</title>
      <link>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/go%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8C%BA/</link>
      <pubDate>Mon, 11 Jan 2021 10:14:02 +0800</pubDate>
      
      <guid>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/go%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8C%BA/</guid>
      <description>GoROOT、GOPATH、GOBIN 的理解 GOROOT:Go语言安装根目录的路径，也就是GO语言的安装路径 GOPATH: 若干工作区目录的路径，即自定义</description>
    </item>
    
    <item>
      <title>make和new</title>
      <link>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/make%E5%92%8Cnew/</link>
      <pubDate>Mon, 11 Jan 2021 10:14:02 +0800</pubDate>
      
      <guid>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/make%E5%92%8Cnew/</guid>
      <description>定义 ​ 都是用于内存分配 区别 分配内存的目标不同 make用于内建类型(map，slice，和channel)的内存分配 new用于各种类型的内存分</description>
    </item>
    
    <item>
      <title>map, slice,array</title>
      <link>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/map-slicearray/</link>
      <pubDate>Mon, 11 Jan 2021 10:14:02 +0800</pubDate>
      
      <guid>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/map-slicearray/</guid>
      <description>Array slice 切片，是对数组的抽象 Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片(&amp;ldquo;</description>
    </item>
    
    <item>
      <title>一些需要注意的地方</title>
      <link>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
      <pubDate>Mon, 11 Jan 2021 10:14:02 +0800</pubDate>
      
      <guid>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
      <description>string类型的数据，不传的时候就是&amp;quot;&amp;quot;，没有nil与&amp;quot;&amp;ldquo;的区别 int类型的数据，不传的时候默认</description>
    </item>
    
    <item>
      <title>基础类型</title>
      <link>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 11 Jan 2021 10:14:02 +0800</pubDate>
      
      <guid>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</guid>
      <description>定义变量 使用 var 关键字是 Go 最基本的定义变量方式，与 C 语言不同的是 Go 把变量类型放在变量名后面: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //定义一个名称为“v</description>
    </item>
    
    <item>
      <title>流程控制</title>
      <link>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 11 Jan 2021 10:14:02 +0800</pubDate>
      
      <guid>http://nanblog.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>for循环 for循环与range一起使用时，range返回两个数，第一个是index，第二个才是值。 1 2 3 4 5 roles := {2,5,10} //此情况role为0，</description>
    </item>
    
  </channel>
</rss>
